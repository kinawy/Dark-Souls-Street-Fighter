// Create image elements to then change source of to the url for the pixel art


// Global variables
let ctx;
let pontiff;
let artorius;
let p1Image;
let p2Image;
let pontAnimations = {
  column: [0, 300, 600, 900, 1200],
  idle: [0],
  walking: [0],
  attacking: [0, 300, 600, 900]
}
let artorAnimations = {}


// function for to check for the ground


// function to get player1 to move
const play1Move = (e) => {
  
  // Switch statement for the keys P1 will be using
  switch (e.code) {
    case "KeyA":
      if (player1.x +50 > 0) {
        this.actionState = 'walking';
        player1.x -= 50;
      }
      break
    case "KeyD":
      if (player1.x + player1.width < game.width) {
        player1.x += 50
      }
      break
    case "KeyW":
      if (player1.y - 10> 0) {
        player1.y -= 15
      }
      break
  }
}
// function to get player2 to move
const play2Move = (e) => {

  // Switch statement for the keys P2 will be using

  switch (e.code) {

    case "ArrowLeft":
      if (player2.x > 0) {
        player2.x -= 50;
      }
      break
    case "ArrowRight":
      if (player2.x + player2.width < game.width) {
        player2.x += 50
      }
      break
    case "ArrowUp":
      if (player2.y < game.height) {
        
        player2.y -= 100
      }
      break
  }
}

// Hopeful sprite sheet animation function




// Create characters
const gamePlay = () => {
  ctx.clearRect(0, 0, game.width, game.height);
  // Check if Pontiff and Artorius are alive, if so, render them
  if (player1.alive || player2.alive) {
    player1.render();
    player2.render();
  }


}



// Function to create player 1, not sure how to get image loaded properly
function Player(x, y, width, height, playerCharacter, playerNumber) {
  // Current Location where player lands
  this.x = x;
  this.y = y;
  // Size of the player
  this.width = width;
  this.height = height;

  // Chooses character
  this.playerCharacter = playerCharacter;
  this.playerNumber = playerNumber;
  // Sets health and Damage
  this.health = 50;
  this.damage = 10;
  // Sets player to alive, to be changed after taking 50 damage
  this.alive = true;
  
  this.actionState = 'idle';
  this.movementStep = 0;
  this.actionRow = 0;
  this.render = function () {
    let charImage;
    let charAnimations;

    if (playerCharacter === 'Artorius') {charImage = artorius; charAnimations = artorAnimations}
    else {charImage = pontiff; charAnimations = pontAnimations}
    // Idle render
    if(this.movementState === 'idle')  {
    ctx.drawImage(
      charImage, // Character Image
       charAnimations['column'][this.movementStep], 
       charAnimations[this.actionState][this.actionRow], 
       300, 
       300,
       this.x, this.y, this.width, this.height)
    }
    }
}
// Function to create player 2, identical to Player 1 but not sure about adding images
// function Player2(x, y, width, height) {
//   this.x = x;
//   this.y = y;
//   this.width = width;
//   this.height = height;
//   this.health = 50;
//   this.damage = 10;
//   this.alive = true;
//   this.render = function () {

//     ctx.drawImage(p2Image, this.x, this.y, this.width, this.height)
//   }
// }

// Detects collision on x axis







// Loads Dom, has game variable, as well as sets game attributes and trying to render my characters
document.addEventListener('DOMContentLoaded', () => {

  // Grabs canvas

  let game = document.getElementById('game');



  // Sets canvas attributes for size and type
  game.setAttribute('height', 550);
  game.setAttribute('width', 1000);
  ctx = game.getContext('2d');

  // create images for characters
  pontiff = new Image();
  artorius = new Image();
  // Load Spritesheets
  pontiff.src = './images/PontiffSprite.png';
  artorius.src = './images/Artorius.gif';


  // Create player models
  player1 = new Player(50, 200, 300, 300, 'Pontiff', 1);
  player2 = new Player(600, 200, 300, 300, 'Artorius', 2);

  // Listen for Keys tied to moveList
  document.addEventListener('keydown', play1Move);
  document.addEventListener('keydown', play2Move);
  

  let runGame = setInterval(gamePlay, 10);



})